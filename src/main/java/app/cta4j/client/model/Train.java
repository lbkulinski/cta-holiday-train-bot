/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package app.cta4j.client.model;

import app.cta4j.client.invoker.JSON;
import com.google.gson.*;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * Represents a train and its schedule information.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-17T15:20:11.832778-06:00[America/Chicago]", comments = "Generator version: 7.7.0")
public class Train {
  public static final String SERIALIZED_NAME_RUN = "run";
  @SerializedName(SERIALIZED_NAME_RUN)
  private Integer run;

  /**
   * Represents the different transit lines in the system.
   */
  @JsonAdapter(LineEnum.Adapter.class)
  public enum LineEnum {
    RED("RED"),
    
    BLUE("BLUE"),
    
    BROWN("BROWN"),
    
    GREEN("GREEN"),
    
    ORANGE("ORANGE"),
    
    PURPLE("PURPLE"),
    
    PINK("PINK"),
    
    YELLOW("YELLOW"),
    
    N_A("N_A");

    private String value;

    LineEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LineEnum fromValue(String value) {
      for (LineEnum b : LineEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LineEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LineEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LineEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LineEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LineEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LINE = "line";
  @SerializedName(SERIALIZED_NAME_LINE)
  private LineEnum line;

  public static final String SERIALIZED_NAME_DESTINATION = "destination";
  @SerializedName(SERIALIZED_NAME_DESTINATION)
  private String destination;

  public static final String SERIALIZED_NAME_STATION = "station";
  @SerializedName(SERIALIZED_NAME_STATION)
  private String station;

  public static final String SERIALIZED_NAME_PREDICTION_TIME = "predictionTime";
  @SerializedName(SERIALIZED_NAME_PREDICTION_TIME)
  private OffsetDateTime predictionTime;

  public static final String SERIALIZED_NAME_ARRIVAL_TIME = "arrivalTime";
  @SerializedName(SERIALIZED_NAME_ARRIVAL_TIME)
  private OffsetDateTime arrivalTime;

  public static final String SERIALIZED_NAME_DUE = "due";
  @SerializedName(SERIALIZED_NAME_DUE)
  private Boolean due;

  public static final String SERIALIZED_NAME_SCHEDULED = "scheduled";
  @SerializedName(SERIALIZED_NAME_SCHEDULED)
  private Boolean scheduled;

  public static final String SERIALIZED_NAME_DELAYED = "delayed";
  @SerializedName(SERIALIZED_NAME_DELAYED)
  private Boolean delayed;

  public Train() {
  }

  public Train run(Integer run) {
    this.run = run;
    return this;
  }

  /**
   * The unique run number of the train.
   * @return run
   */
  @jakarta.annotation.Nonnull
  public Integer getRun() {
    return run;
  }

  public void setRun(Integer run) {
    this.run = run;
  }


  public Train line(LineEnum line) {
    this.line = line;
    return this;
  }

  /**
   * Represents the different transit lines in the system.
   * @return line
   */
  @jakarta.annotation.Nonnull
  public LineEnum getLine() {
    return line;
  }

  public void setLine(LineEnum line) {
    this.line = line;
  }


  public Train destination(String destination) {
    this.destination = destination;
    return this;
  }

  /**
   * The final destination of the train.
   * @return destination
   */
  @jakarta.annotation.Nonnull
  public String getDestination() {
    return destination;
  }

  public void setDestination(String destination) {
    this.destination = destination;
  }


  public Train station(String station) {
    this.station = station;
    return this;
  }

  /**
   * The station where the train will next arrive.
   * @return station
   */
  @jakarta.annotation.Nonnull
  public String getStation() {
    return station;
  }

  public void setStation(String station) {
    this.station = station;
  }


  public Train predictionTime(OffsetDateTime predictionTime) {
    this.predictionTime = predictionTime;
    return this;
  }

  /**
   * The time when the arrival prediction was made.
   * @return predictionTime
   */
  @jakarta.annotation.Nonnull
  public OffsetDateTime getPredictionTime() {
    return predictionTime;
  }

  public void setPredictionTime(OffsetDateTime predictionTime) {
    this.predictionTime = predictionTime;
  }


  public Train arrivalTime(OffsetDateTime arrivalTime) {
    this.arrivalTime = arrivalTime;
    return this;
  }

  /**
   * The estimated arrival time of the train at the station.
   * @return arrivalTime
   */
  @jakarta.annotation.Nonnull
  public OffsetDateTime getArrivalTime() {
    return arrivalTime;
  }

  public void setArrivalTime(OffsetDateTime arrivalTime) {
    this.arrivalTime = arrivalTime;
  }


  public Train due(Boolean due) {
    this.due = due;
    return this;
  }

  /**
   * Indicates whether the train is due to arrive soon.
   * @return due
   */
  @jakarta.annotation.Nonnull
  public Boolean getDue() {
    return due;
  }

  public void setDue(Boolean due) {
    this.due = due;
  }


  public Train scheduled(Boolean scheduled) {
    this.scheduled = scheduled;
    return this;
  }

  /**
   * Indicates whether the train is arriving according to its schedule.
   * @return scheduled
   */
  @jakarta.annotation.Nonnull
  public Boolean getScheduled() {
    return scheduled;
  }

  public void setScheduled(Boolean scheduled) {
    this.scheduled = scheduled;
  }


  public Train delayed(Boolean delayed) {
    this.delayed = delayed;
    return this;
  }

  /**
   * Indicates whether the train is delayed.
   * @return delayed
   */
  @jakarta.annotation.Nonnull
  public Boolean getDelayed() {
    return delayed;
  }

  public void setDelayed(Boolean delayed) {
    this.delayed = delayed;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Train train = (Train) o;
    return Objects.equals(this.run, train.run) &&
        Objects.equals(this.line, train.line) &&
        Objects.equals(this.destination, train.destination) &&
        Objects.equals(this.station, train.station) &&
        Objects.equals(this.predictionTime, train.predictionTime) &&
        Objects.equals(this.arrivalTime, train.arrivalTime) &&
        Objects.equals(this.due, train.due) &&
        Objects.equals(this.scheduled, train.scheduled) &&
        Objects.equals(this.delayed, train.delayed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(run, line, destination, station, predictionTime, arrivalTime, due, scheduled, delayed);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Train {\n");
    sb.append("    run: ").append(toIndentedString(run)).append("\n");
    sb.append("    line: ").append(toIndentedString(line)).append("\n");
    sb.append("    destination: ").append(toIndentedString(destination)).append("\n");
    sb.append("    station: ").append(toIndentedString(station)).append("\n");
    sb.append("    predictionTime: ").append(toIndentedString(predictionTime)).append("\n");
    sb.append("    arrivalTime: ").append(toIndentedString(arrivalTime)).append("\n");
    sb.append("    due: ").append(toIndentedString(due)).append("\n");
    sb.append("    scheduled: ").append(toIndentedString(scheduled)).append("\n");
    sb.append("    delayed: ").append(toIndentedString(delayed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("run");
    openapiFields.add("line");
    openapiFields.add("destination");
    openapiFields.add("station");
    openapiFields.add("predictionTime");
    openapiFields.add("arrivalTime");
    openapiFields.add("due");
    openapiFields.add("scheduled");
    openapiFields.add("delayed");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("run");
    openapiRequiredFields.add("line");
    openapiRequiredFields.add("destination");
    openapiRequiredFields.add("station");
    openapiRequiredFields.add("predictionTime");
    openapiRequiredFields.add("arrivalTime");
    openapiRequiredFields.add("due");
    openapiRequiredFields.add("scheduled");
    openapiRequiredFields.add("delayed");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Train
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Train.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Train is not found in the empty JSON string", Train.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Train.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Train` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Train.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("line").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `line` to be a primitive type in the JSON string but got `%s`", jsonObj.get("line").toString()));
      }
      // validate the required field `line`
      LineEnum.validateJsonElement(jsonObj.get("line"));
      if (!jsonObj.get("destination").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destination` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destination").toString()));
      }
      if (!jsonObj.get("station").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `station` to be a primitive type in the JSON string but got `%s`", jsonObj.get("station").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Train.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Train' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Train> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Train.class));

       return (TypeAdapter<T>) new TypeAdapter<Train>() {
           @Override
           public void write(JsonWriter out, Train value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Train read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Train given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Train
   * @throws IOException if the JSON string is invalid with respect to Train
   */
  public static Train fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Train.class);
  }

  /**
   * Convert an instance of Train to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

